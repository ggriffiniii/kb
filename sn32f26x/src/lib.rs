#![doc = "Peripheral access API for SN32F260 microcontrollers (generated using svd2rust v0.24.0 (b9a7b92 2022-05-12))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next]
svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.24.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![deny(const_err)]
#![deny(dead_code)]
#![deny(improper_ctypes)]
#![deny(missing_docs)]
#![deny(no_mangle_generic_items)]
#![deny(non_shorthand_field_patterns)]
#![deny(overflowing_literals)]
#![deny(path_statements)]
#![deny(patterns_in_fns_without_body)]
#![deny(private_in_public)]
#![deny(unconditional_recursion)]
#![deny(unused_allocation)]
#![deny(unused_comparisons)]
#![deny(unused_parens)]
#![deny(while_true)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
use core::marker::PhantomData;
use core::ops::Deref;
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 2;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {
    fn NDT();
    fn USB();
    fn SPI0();
    fn I2C0();
    fn CT16B0();
    fn CT16B1();
    fn WDT();
    fn LVD();
    fn P3();
    fn P2();
    fn P1();
    fn P0();
}
#[doc(hidden)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 32] = [
    Vector { _handler: NDT },
    Vector { _handler: USB },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: SPI0 },
    Vector { _reserved: 0 },
    Vector { _handler: I2C0 },
    Vector { _handler: CT16B0 },
    Vector { _handler: CT16B1 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: WDT },
    Vector { _handler: LVD },
    Vector { _reserved: 0 },
    Vector { _handler: P3 },
    Vector { _handler: P2 },
    Vector { _handler: P1 },
    Vector { _handler: P0 },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - NDT"]
    NDT = 0,
    #[doc = "1 - USB"]
    USB = 1,
    #[doc = "13 - SPI0"]
    SPI0 = 13,
    #[doc = "15 - I2C0"]
    I2C0 = 15,
    #[doc = "16 - CT16B0"]
    CT16B0 = 16,
    #[doc = "17 - CT16B1"]
    CT16B1 = 17,
    #[doc = "25 - WDT"]
    WDT = 25,
    #[doc = "26 - LVD"]
    LVD = 26,
    #[doc = "28 - P3"]
    P3 = 28,
    #[doc = "29 - P2"]
    P2 = 29,
    #[doc = "30 - P1"]
    P1 = 30,
    #[doc = "31 - P0"]
    P0 = 31,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "System Control Registers"]
pub struct SN_SYS0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SN_SYS0 {}
impl SN_SYS0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sn_sys0::RegisterBlock = 0x4006_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sn_sys0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SN_SYS0 {
    type Target = sn_sys0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SN_SYS0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SN_SYS0").finish()
    }
}
#[doc = "System Control Registers"]
pub mod sn_sys0;
#[doc = "System Control Registers"]
pub struct SN_SYS1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SN_SYS1 {}
impl SN_SYS1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sn_sys1::RegisterBlock = 0x4005_e000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sn_sys1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SN_SYS1 {
    type Target = sn_sys1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SN_SYS1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SN_SYS1").finish()
    }
}
#[doc = "System Control Registers"]
pub mod sn_sys1;
#[doc = "Universal Serial Bus Full Speed Device Interface (USB)"]
pub struct SN_USB {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SN_USB {}
impl SN_USB {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sn_usb::RegisterBlock = 0x4005_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sn_usb::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SN_USB {
    type Target = sn_usb::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SN_USB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SN_USB").finish()
    }
}
#[doc = "Universal Serial Bus Full Speed Device Interface (USB)"]
pub mod sn_usb;
#[doc = "General Purpose I/O"]
pub struct SN_GPIO0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SN_GPIO0 {}
impl SN_GPIO0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sn_gpio0::RegisterBlock = 0x4004_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sn_gpio0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SN_GPIO0 {
    type Target = sn_gpio0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SN_GPIO0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SN_GPIO0").finish()
    }
}
#[doc = "General Purpose I/O"]
pub mod sn_gpio0;
#[doc = "General Purpose I/O"]
pub struct SN_GPIO1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SN_GPIO1 {}
impl SN_GPIO1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sn_gpio1::RegisterBlock = 0x4004_6000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sn_gpio1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SN_GPIO1 {
    type Target = sn_gpio1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SN_GPIO1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SN_GPIO1").finish()
    }
}
#[doc = "General Purpose I/O"]
pub mod sn_gpio1;
#[doc = "General Purpose I/O"]
pub struct SN_GPIO2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SN_GPIO2 {}
impl SN_GPIO2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sn_gpio2::RegisterBlock = 0x4004_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sn_gpio2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SN_GPIO2 {
    type Target = sn_gpio2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SN_GPIO2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SN_GPIO2").finish()
    }
}
#[doc = "General Purpose I/O"]
pub mod sn_gpio2;
#[doc = "General Purpose I/O"]
pub struct SN_GPIO3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SN_GPIO3 {}
impl SN_GPIO3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sn_gpio3::RegisterBlock = 0x4004_a000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sn_gpio3::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SN_GPIO3 {
    type Target = sn_gpio3::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SN_GPIO3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SN_GPIO3").finish()
    }
}
#[doc = "General Purpose I/O"]
pub mod sn_gpio3;
#[doc = "Watchdog Timer"]
pub struct SN_WDT {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SN_WDT {}
impl SN_WDT {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sn_wdt::RegisterBlock = 0x4001_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sn_wdt::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SN_WDT {
    type Target = sn_wdt::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SN_WDT {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SN_WDT").finish()
    }
}
#[doc = "Watchdog Timer"]
pub mod sn_wdt;
#[doc = "16-bit Timer 0 with Capture function"]
pub struct SN_CT16B0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SN_CT16B0 {}
impl SN_CT16B0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sn_ct16b0::RegisterBlock = 0x4000_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sn_ct16b0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SN_CT16B0 {
    type Target = sn_ct16b0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SN_CT16B0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SN_CT16B0").finish()
    }
}
#[doc = "16-bit Timer 0 with Capture function"]
pub mod sn_ct16b0;
#[doc = "16-bit Timer 1 with Capture function"]
pub struct SN_CT16B1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SN_CT16B1 {}
impl SN_CT16B1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sn_ct16b1::RegisterBlock = 0x4000_2000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sn_ct16b1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SN_CT16B1 {
    type Target = sn_ct16b1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SN_CT16B1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SN_CT16B1").finish()
    }
}
#[doc = "16-bit Timer 1 with Capture function"]
pub mod sn_ct16b1;
#[doc = "Power Management Unit"]
pub struct SN_PMU {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SN_PMU {}
impl SN_PMU {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sn_pmu::RegisterBlock = 0x4003_2000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sn_pmu::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SN_PMU {
    type Target = sn_pmu::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SN_PMU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SN_PMU").finish()
    }
}
#[doc = "Power Management Unit"]
pub mod sn_pmu;
#[doc = "SPI0"]
pub struct SN_SPI0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SN_SPI0 {}
impl SN_SPI0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sn_spi0::RegisterBlock = 0x4001_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sn_spi0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SN_SPI0 {
    type Target = sn_spi0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SN_SPI0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SN_SPI0").finish()
    }
}
#[doc = "SPI0"]
pub mod sn_spi0;
#[doc = "I2C0"]
pub struct SN_I2C0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SN_I2C0 {}
impl SN_I2C0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sn_i2c0::RegisterBlock = 0x4001_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sn_i2c0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SN_I2C0 {
    type Target = sn_i2c0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SN_I2C0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SN_I2C0").finish()
    }
}
#[doc = "I2C0"]
pub mod sn_i2c0;
#[doc = "FLASH Memory Control Registers"]
pub struct SN_FLASH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SN_FLASH {}
impl SN_FLASH {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sn_flash::RegisterBlock = 0x4006_2000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sn_flash::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SN_FLASH {
    type Target = sn_flash::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SN_FLASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SN_FLASH").finish()
    }
}
#[doc = "FLASH Memory Control Registers"]
pub mod sn_flash;
#[doc = "UC Registers"]
pub struct SN_UC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SN_UC {}
impl SN_UC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sn_uc::RegisterBlock = 0x1fff_2220 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sn_uc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SN_UC {
    type Target = sn_uc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SN_UC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SN_UC").finish()
    }
}
#[doc = "UC Registers"]
pub mod sn_uc;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r"All the peripherals"]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "SN_SYS0"]
    pub SN_SYS0: SN_SYS0,
    #[doc = "SN_SYS1"]
    pub SN_SYS1: SN_SYS1,
    #[doc = "SN_USB"]
    pub SN_USB: SN_USB,
    #[doc = "SN_GPIO0"]
    pub SN_GPIO0: SN_GPIO0,
    #[doc = "SN_GPIO1"]
    pub SN_GPIO1: SN_GPIO1,
    #[doc = "SN_GPIO2"]
    pub SN_GPIO2: SN_GPIO2,
    #[doc = "SN_GPIO3"]
    pub SN_GPIO3: SN_GPIO3,
    #[doc = "SN_WDT"]
    pub SN_WDT: SN_WDT,
    #[doc = "SN_CT16B0"]
    pub SN_CT16B0: SN_CT16B0,
    #[doc = "SN_CT16B1"]
    pub SN_CT16B1: SN_CT16B1,
    #[doc = "SN_PMU"]
    pub SN_PMU: SN_PMU,
    #[doc = "SN_SPI0"]
    pub SN_SPI0: SN_SPI0,
    #[doc = "SN_I2C0"]
    pub SN_I2C0: SN_I2C0,
    #[doc = "SN_FLASH"]
    pub SN_FLASH: SN_FLASH,
    #[doc = "SN_UC"]
    pub SN_UC: SN_UC,
}
impl Peripherals {
    #[doc = r"Returns all the peripherals *once*"]
    #[inline]
    pub fn take() -> Option<Self> {
        cortex_m::interrupt::free(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                None
            } else {
                Some(unsafe { Peripherals::steal() })
            }
        })
    }
    #[doc = r"Unchecked version of `Peripherals::take`"]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            SN_SYS0: SN_SYS0 {
                _marker: PhantomData,
            },
            SN_SYS1: SN_SYS1 {
                _marker: PhantomData,
            },
            SN_USB: SN_USB {
                _marker: PhantomData,
            },
            SN_GPIO0: SN_GPIO0 {
                _marker: PhantomData,
            },
            SN_GPIO1: SN_GPIO1 {
                _marker: PhantomData,
            },
            SN_GPIO2: SN_GPIO2 {
                _marker: PhantomData,
            },
            SN_GPIO3: SN_GPIO3 {
                _marker: PhantomData,
            },
            SN_WDT: SN_WDT {
                _marker: PhantomData,
            },
            SN_CT16B0: SN_CT16B0 {
                _marker: PhantomData,
            },
            SN_CT16B1: SN_CT16B1 {
                _marker: PhantomData,
            },
            SN_PMU: SN_PMU {
                _marker: PhantomData,
            },
            SN_SPI0: SN_SPI0 {
                _marker: PhantomData,
            },
            SN_I2C0: SN_I2C0 {
                _marker: PhantomData,
            },
            SN_FLASH: SN_FLASH {
                _marker: PhantomData,
            },
            SN_UC: SN_UC {
                _marker: PhantomData,
            },
        }
    }
}
